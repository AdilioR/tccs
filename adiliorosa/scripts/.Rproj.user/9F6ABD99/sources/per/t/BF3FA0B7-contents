# Remove todos os objetos do workspace
rm(list = ls())

# Configurações de diretórios do projeto
workingDirectory <- "C:/StockMarketGit/arosa/StockMarket/rworkingdirectory"
scriptsDirectory <- "C:/StockMarketGit/arosa/StockMarket/scripts/"

# Determina em qual diret?io o working directory
setwd(workingDirectory)

# -> Carrega scripts com vari?eis globais e fun?es necess?ias
source(paste(scriptsDirectory, "Main.R", sep = ""))
source(paste(scriptsDirectory, "TechnicalAnalysis.R", sep = ""))

# Remove todos os objetos do workspace

asset.name <- "ABEV3.SA"

#@TODO: receber o dataset, em vez de inserir no workspace
Main.loadCsvIntoWorkspace(asset.name, as.Date("1970-01-01"), header = TRUE, sep = ",")


start <- function()
{

  # gera classificadores para SMA
  
  for(nSlow in seq(from=121, to=220, by=1)) # 60 a 220
  { # Cada ?dice ?um tamanho de m?ia m?el


    for(nFast in seq(from=5, to=8, by=1))
    { # 5 a 55

      #SMA
      predicted_decision_list <- TechnicalAnalysis.getDecisionList.SMA(nFast, nSlow) #lista ok
      Main.setStrategyResults(asset.name = asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, strategy_name = "SMA", strategy_details = paste("long-", nSlow, "_short-", nFast, sep = ""), predicted_decision_list = predicted_decision_list, percent_train = 0.8)
    }

    Main.avoidFactors()
  
    #save.image(file = paste(asset.name, nSlow, "SMA_workspace.RData", sep = "_"))
  
    print(paste("Finalizado as: ", Sys.time()))


    
  }
  
  #ema
  for(nSlow in seq(from=87, to=220, by=1)) # 60 a 220
  { # Cada ?dice ?um tamanho de m?ia m?el
    
    
    
    for(nFast in seq(from=5, to=55, by=1))
    {
      
      #EMA
      predicted_decision_list <- TechnicalAnalysis.getDecisionList.EMA(nFast, nSlow)
      Main.setStrategyResults(asset.name = asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, strategy_name = "EMA", strategy_details = paste("long-", nSlow, "_short-", nFast, sep = ""), predicted_decision_list = predicted_decision_list, percent_train = 0.8)
      #gerar linhas em Result.StrategyList
      
    }
    
    Main.avoidFactors()
    Main.setCandidateStrategies()
    
    save.image(file = paste(asset.name, nSlow, "EMA_workspace.RData", sep = "_"))
    
    print(paste("Finalizado as: ", Sys.time()))
    
    rm(Result.CandidateStrategyList)
    rm(Result.StrategyList)
    
  }
  
  #macd
  for(nSlow in seq(from=164, to=220, by=1)) # 60 a 220
  { # Cada ?dice ?um tamanho de m?ia m?el
    
    
    
    for(nFast in seq(from=5, to=55, by=1))
    {
    
      #MACD
      nSig <- 9
      predicted_decision_list <- TechnicalAnalysis.getDecisionList.MACD(nFast, nSlow, nSig)
      Main.setStrategyResults(asset.name = asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, strategy_name = "MACD", strategy_details = paste("long-", nSlow, "_short-", nFast, "_nsig-", nSig, sep = ""), predicted_decision_list = predicted_decision_list, percent_train = 0.8)
      
    }
    
    Main.avoidFactors()
    Main.setCandidateStrategies()
    
    save.image(file = paste(asset.name, nSlow, "MACD_workspace.RData", sep = "_"))
    
    print(paste("Finalizado as: ", Sys.time()))
    
    rm(Result.CandidateStrategyList)
    rm(Result.StrategyList)
    
  }
  
  
  
  
  
  #1 to 56
  for(nFastK in seq(from=1, to=56, by=1))
  { # Cada ?ndice ?um tamanho de m?ia m?el
  
  	for(nFastD in seq(from=2, to=21, by=1))
  	{
  		predicted_decision_list <- TechnicalAnalysis.getDecisionList.FASTSTOCH(nFastK, nFastD)
  		Main.setStrategyResults(asset.name = asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, strategy_name = "Fast Stochastic", strategy_details = paste("nfastk-", nFastK, "_nfastd-", nFastD, sep = ""), predicted_decision_list = predicted_decision_list, percent_train = 0.8)
  	}
  #}
  
  # #gera classificadores para RSI
  # 9 a 30 OU 16 a 30, como em CAST: Using neural networks to improve trading systems based on technical analysis by means of the RSI financial indicator
   for(MALength in seq(from=16, to=30, by=1))
   { # Cada ?dice ?um tamanho de m?ia m?el
   
   	for(nivelInferior in seq(from=30, to=40, by=5)) # 10 a 40
   	{ # de 1 a 49
   
   		for(nivelSuperior in seq(from=60, to=70, by=5)) # 60 a 90
   		{ # de 51 a 99
   			predicted_decision_list <- TechnicalAnalysis.getDecisionList.RSI(MALength, nivelInferior, nivelSuperior)
   			Main.setStrategyResults(asset.name = asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, strategy_name = "RSI", strategy_details = paste("MAType-", "SMA_", "MaLength-", MALength, "_inf-level-", nivelInferior, "_sup-level-", nivelSuperior, sep = ""), predicted_decision_list = predicted_decision_list, percent_train = 0.8)
   		}
   	}
   }
  
  #gera estrat?ias aleat?ias
   Main.setRandomStrategies(dataset_size = nrow(Asset.TransactionList), number_of_similar_random_strategies = 1, asset.name, asset.transaction_list.prices = Asset.TransactionList$Adj_Close, asset.transaction_list.dates = Asset.TransactionList$Date, percent_train = 0.8)
  
  Main.avoidFactors()
  Main.setCandidateStrategies()
  
  save.image(file = paste(asset.name, "workspace.RData", sep = "_"))
  
  print(paste("Finalizado as: ", Sys.time()))
  
  
}

start()

graphics <- function()
{
	require(ggplot2)
  	g = ggplot(Result.StrategyList, aes(x = indicador.points_treino, y = indicador.points_teste))
  	g + geom_point(aes(color = strategy_name), size=3, show.legend = TRUE)
  
  	# min distance
  	g = ggplot(Result.StrategyList, aes(x = indicador.points_treino, y = indicador.points_teste))
  	g + geom_point(aes(color = min_distance_between_operations), size=3, show.legend = TRUE)
  
  	# precision tolerance
  	g = ggplot(Result.StrategyList, aes(x = indicador.points_treino, y = indicador.points_teste))
  	g + geom_point(aes(color = precision_tolerance), size=3, show.legend = TRUE)


  	#retorno medio
  	g = ggplot(Result.StrategyList, aes(x = average_return_train, y = average_return_test))
  	g + geom_point(aes(color = strategy_name), size=3, show.legend = TRUE)


  	Asset.TransactionList.Partial <- Asset.TransactionList[Asset.TransactionList$Date > "2017-01-01",]
  	#expected classes
  	g = ggplot(Asset.TransactionList.Partial, aes(x = Date, y = Adj_Close))
	g + geom_point(aes(color = ExpectedClasses), size=3, show.legend = TRUE)
	#predicted classes
	g = ggplot(Asset.TransactionList.Partial, aes(x = Date, y = Adj_Close))
	g + geom_point(aes(color = PredictedClasses), size=2, show.legend = TRUE)
}

getDetailedDecisions <- function()
{
  Main.addSpecificEMAResultIntoAsset(nFast = 4, nSlow = 5)
  
}

carregarDataset <- function(fileNameWithExtension)
{
  setwd(workingDirectory)
  load(fileNameWithExtension)
}

